# SEMPM stands for Sun-Earth-Moon Parameterization Method
#=========================================================================

This C/C++ programm allows to compute high-order Fourier-Taylor expansions of the invariant manifolds 
about the libration points of the Sun-Earth-Moon system, either modeled by the QBCP or the CRTBP
(an extension to other problems is clearly possible).
To do so, it implements the Parameterization Method in the case of T-periodic orbits of a T-periodic Hamiltonian.

# Depencencies 
#=========================================================================
* SEMPM depends on the GNU Scientific Library (GSL) a C library available here: https://www.gnu.org/software/gsl/.
* For on-the-fly plotting, it also requires Gnuplot, via gnuplot_i.cpp, an extension of the C interface to Gnuplot by N. Devillard. 
* It also uses an extension of nrutils.h/nrutils.cpp from Numerical Recipes in C for the implementation of C vectors, matrices, and tensors.
* The GUI (optional) requires YAD, a program that allows to display GTK+ dialog boxes 
from command line or shell scripts, and available here: https://sourceforge.net/projects/yad-dialog/.
The GUI is optional since SEMPM can be launched from the command line with a configuration script.

# Building 
#=========================================================================
Two possibilities

(i) Run the command
'make'

(ii) Open the project sempm.cbp in code::blocks and build within the software

# How to use it  (once built)
#=========================================================================
Once built, you have two ways to use SEMPM

(1) Command line. In the sempm folder, run a command of the form
$ sempm.sh config/<my_configuration_script>.sh

where <my_configuration_script>.sh is a configuration script that is required to pass argument to sempm.

For the QBCP, a typical workflow is:

a. $ sempm.sh config/qbcp.sh                     //in order to compute the QBCP vector field in /data/VF/ and /data/qbtbp/.
b. $ sempm.sh config/nfo2/nfo2_eml2.sh           //in order to compute the dynamical equivalent of EML2 and 
				                 //the change of coordinates (COC) in order to get a normal form at order 2 
				                 //for the Hamiltonian about the same point (stored in /data/COC/).
c. $ sempm.sh config/pm/pm_cm_eml2.sh            //in order to compute the high-order parameterization of the center manifold 
				                 //about EML2 using the Parameterization Method.
d. $ sempm.sh config/test_pm/test_cm_eml2.sh     //in order to test this parameterization at certain orders.
e. $ sempm.sh config/pmap/pmap_example_eml2.sh   //minimum working example that plots on the fly a Poincaré map 
						 //at a certain initial energy level using the previous computations

NOTE: steps (a) and (b) have been already performed in the default version so, in principle, there is no need to run them again.


For the CRTBP, a typical workflow is:


a. $ sempm.sh config/pm/pm_cm_eml1_crtbp.sh            //in order to compute the high-order parameterization of the center manifold 
				                       //about EML1 using the Parameterization Method.
b. $ sempm.sh config/test_pm/test_cm_eml1_crtbp.sh     //in order to test this parameterization at certain orders.
c. $ sempm.sh config/pmap/pmap_example_eml1_crtbp.sh   //minimum working example that plots on the fly a Poincaré map 
						       //at a certain initial energy level using the previous computations


(2) Via the GUI (in progress). In the sempm folder, run the following command:
$ sempm.sh 
If sempm.sh is run without any argument, the sempm Graphic User Interface (GUI) is launched, providing that YAD is installed.
If YAD is not installed, you must use sempm via commands of the form (1)


# Issues & Remarks (in order of importance)
#=========================================================================
1. A memory leak might occur in the destructor of Oftsh class. 
This is not a big deal as long as Ofts objects (that require the construction of quite a lot of Oftsh objects)
are not massively created. This is currently the case in the code (no temporary Ofts object).
Of course, a more stable version of the code would require to deal with this issue. 

2. The GSL is used mainly for two aspects:
* Some algebraic manipulation, performed by the BLAS implementation in the GSL.
* Numerical integration of ODE.
The GSL being a C library, it has driven the code to be a C/C++ mix rather than a pure C++ software. 
Consequently, C pointers and C++ vectors and references are cohabitating in a suboptimal way.
At the bear minimum, one should think of a clean interface between the C libraries (GSL, gnuplot_i) and the C++ core.

3. The complex numbers are implemented as 'double complex' from C (typedef cdouble in the code), 
instead of the std::complex class from the standard C++ library.
This currently clashes with some C++ libraries such as boost, hence preventing their use in sempm.
This questionable choice has been made at the very beginning of the project in order to be able to use the GSL. 
One may consider the possibility to switch from (GSL, complex double) to (Boost, std::complex).
This would also help clarify the boundary between the C and the C++;



